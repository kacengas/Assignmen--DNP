@page "/post/{postId:int}"
@using Entities
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Post Details</PageTitle>

@if (postToDisplay == null && !isLoading)
{
    <p>Could not load post details. Please check if the post exists.</p>
}
else if (isLoading)
{
    <p>Loading post details...</p>
}
else
{
    <div class="post-details">
        <h1>@postToDisplay.Title</h1>
        <p>@postToDisplay.Content</p>
        <small>Posted on @postToDisplay.Date.ToString("MMMM dd, yyyy") by User @postToDisplay.UserId</small>
    </div>

    <h2>Comments</h2>
    @if (comments == null || comments.Count == 0)
    {
        <p>No comments available for this post.</p>
    }
    else
    {
        <ul class="comments-list">
            @foreach (var comment in comments)
            {
                <li class="comment">
                    <p>@comment.Content</p>
                    <small>Posted on @comment.Date.ToString("MMMM dd, yyyy") by User @comment.UserId</small>
                </li>
            }
        </ul>
    }
    
    <button @onclick="GoBack">Back to Posts</button>
}

@code {
    [Parameter] public int postId { get; set; }
    private Post? postToDisplay;
    private List<Comment>? comments;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            // Fetch the post details
            postToDisplay = await Http.GetFromJsonAsync<Post>($"post/{postId}");
            
            // Fetch the comments for the post
            comments = await Http.GetFromJsonAsync<List<Comment>>($"post/{postId}/comments");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading post details or comments: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }

    // Classes for Post and Comment (you might already have these in your project)
    public class Post
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Content { get; set; }
        public DateTime Date { get; set; }
        public int UserId { get; set; }
    }

    public class Comment
    {
        public int Id { get; set; }
        public string Content { get; set; }
        public DateTime Date { get; set; }
        public int UserId { get; set; }
        public int PostId { get; set; } // Foreign key to Post, if applicable
    }
}
